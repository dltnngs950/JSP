1. factorial  ( ! )
재귀함수 (메소드) : 자기 자신을 호출하는 함수(메소드)


maven package시 test 코드 실행 스킵

mvn package -Dmaven.test.skip=true

HttpServletReqeust : 사용자가 요청을 보낼때의 정보 (파라미터, 헤더, 쿠키 ...)를 은닉화한 객체
					serVlet-container에서 생성
					serVlet-container가 생성하며service 메서드를 호출할 때 사용되는 인자
					service(doXxx)
주요 사용 용도 
	1. check parameter info
		-> 인위 조작이 불가
		   getParameter는 존재하지만 setParameter 메서드는 없음
		    ==> request 클래스의 wrapper 클래스를 이용하여 파라미터 조작가능
	2. check header info
	3. set attribute info, search 
		-> 개발자가 인위 조작 가능
		   getAttribute, setAttribute 메서드 존재
	4. contextPath 확인
		
		서블릿 + 정적인 컨텐츠(js, css, image등) 들의 집합
		
		webApplication =(similar) contextPath
		
		request.getcontextPath()를 통해 contextPath 문자열을 얻어올 수 있다
		
		서버 하나에 여러개의 웹어플리케이션을 서비스 하는 것이 가능
		--> url 요청시 어떤 웹 어플리케이션을 의미하는지 구분이 필요
		
		http://도메인/CONTEXT_PATH/경로
		
		==> css, javascript, image 파일의 경로를 설정 할때 사용
		
			jsp라는 이름으로 contextPath가 설정된 웹어플리케이션의 경우
			webapp/image/brown.png 파일의 경로를 다음과 같이 설정할 수 있다
		    <img src="/jsp/image.brown.png"/>
		    
		    ==> jsp라는 이름의 컨텍스트 패스를 수정할 경우 링크와 관련된 부분을 모두 수정해야하는
		    	문제점이 발생
		    	
		    	request.getContextPath()메소드를 통해 유지 보수 문제 해결 가능
		    	<img src="<%=request.getContextPath()%>/image/brown.png"/>
		    	
	webapp/jsp/request.jsp
	
	jsp 파일 내용 : requset 객체에서 제공하는 메소두와, 메소드의 리턴값을 확인
	<body>
		request.getContextType() : 리턴값을 출력 <br>
		request.getMethod() : 리턴값을 출력 <br>
		requset.getRequestURI() : 리턴값을 출력 <br>
		requset.getContextPath() : 리턴값을 출력 <br>
		requset.getServerPort() : 리턴값을 출력 <br>




